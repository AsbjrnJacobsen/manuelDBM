// <auto-generated />
using System;
using ActivityMonitorAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ActivityMonitorAPI.Migrations
{
    [DbContext(typeof(ActivityDBContext))]
    [Migration("20240923144243_ef-constraints-and-add-data")]
    partial class efconstraintsandadddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActivityMonitorAPI.Activity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("activityDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("nameActivity")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.HasKey("id");

                    b.HasIndex("categoryName")
                        .IsUnique();

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            activityDescription = "Actively using IDE",
                            categoryName = "Work",
                            nameActivity = "Coding"
                        },
                        new
                        {
                            id = 2,
                            activityDescription = "Relaxing on youtube",
                            categoryName = "Leisure",
                            nameActivity = "Watching youtube"
                        },
                        new
                        {
                            id = 3,
                            activityDescription = "Acquiring new knowledge",
                            categoryName = "Research",
                            nameActivity = "Stackoverflow"
                        },
                        new
                        {
                            id = 4,
                            activityDescription = "PC is idle",
                            categoryName = "Afk",
                            nameActivity = "No user activity"
                        },
                        new
                        {
                            id = 5,
                            activityDescription = "Planning..? Shittalking..? Its on discord at least.",
                            categoryName = "Meeting",
                            nameActivity = "Discord Meeting"
                        },
                        new
                        {
                            id = 6,
                            activityDescription = "Limiting EXP waste",
                            categoryName = "Gaming",
                            nameActivity = "Playing OSRS"
                        });
                });

            modelBuilder.Entity("ActivityMonitorAPI.ActivityCategory", b =>
                {
                    b.Property<string>("catName")
                        .HasColumnType("varchar(100)");

                    b.HasKey("catName");

                    b.ToTable("ActivityCategory");

                    b.HasData(
                        new
                        {
                            catName = "Work"
                        },
                        new
                        {
                            catName = "Leisure"
                        },
                        new
                        {
                            catName = "Research"
                        },
                        new
                        {
                            catName = "Afk"
                        },
                        new
                        {
                            catName = "Meeting"
                        },
                        new
                        {
                            catName = "Gaming"
                        });
                });

            modelBuilder.Entity("ActivityMonitorAPI.ActivityDuration", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("activityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("durationTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("activityId")
                        .IsUnique();

                    b.ToTable("ActivityCategories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            activityId = 1,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3843)
                        },
                        new
                        {
                            id = 2,
                            activityId = 2,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3913)
                        },
                        new
                        {
                            id = 3,
                            activityId = 3,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3915)
                        },
                        new
                        {
                            id = 4,
                            activityId = 4,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3916)
                        },
                        new
                        {
                            id = 5,
                            activityId = 5,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3918)
                        },
                        new
                        {
                            id = 6,
                            activityId = 6,
                            durationTime = new TimeSpan(0, 2, 0, 0, 0),
                            startTime = new DateTime(2024, 9, 23, 16, 42, 43, 476, DateTimeKind.Local).AddTicks(3919)
                        });
                });

            modelBuilder.Entity("ActivityMonitorAPI.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "larsGmanHenning@gmail.com",
                            userName = "Lars Henning"
                        },
                        new
                        {
                            id = 2,
                            email = "Paludan@gmail.com",
                            userName = "Peter Paludan"
                        },
                        new
                        {
                            id = 3,
                            email = "henribobendi@gmail.com",
                            userName = "Henriette"
                        },
                        new
                        {
                            id = 4,
                            email = "JensJensJens@gmail.com",
                            userName = "Jens Jensen"
                        },
                        new
                        {
                            id = 5,
                            email = "belastende@gmail.com",
                            userName = "Bent Belastende"
                        });
                });

            modelBuilder.Entity("ActivityMonitorAPI.Activity", b =>
                {
                    b.HasOne("ActivityMonitorAPI.ActivityCategory", "activityCategory")
                        .WithOne("activity")
                        .HasForeignKey("ActivityMonitorAPI.Activity", "categoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_activityCategory");

                    b.Navigation("activityCategory");
                });

            modelBuilder.Entity("ActivityMonitorAPI.ActivityDuration", b =>
                {
                    b.HasOne("ActivityMonitorAPI.Activity", "activity")
                        .WithOne("activityDuration")
                        .HasForeignKey("ActivityMonitorAPI.ActivityDuration", "activityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivityDuration_Activity");

                    b.Navigation("activity");
                });

            modelBuilder.Entity("ActivityMonitorAPI.Activity", b =>
                {
                    b.Navigation("activityDuration")
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityMonitorAPI.ActivityCategory", b =>
                {
                    b.Navigation("activity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
